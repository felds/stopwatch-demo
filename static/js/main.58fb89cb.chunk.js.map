{"version":3,"sources":["Ring.tsx","App.tsx","serviceWorker.js","index.js"],"names":["PI","Math","TAU","Ring","_ref","value","_ref$thickness","thickness","_ref$color","color","_ref$trackColor","trackColor","children","canvasRef","useRef","useEffect","current","canvas","size","min","offsetHeight","offsetWidth","width","height","ctx","getContext","clearRect","lineWidth","lineCap","beginPath","arc","strokeStyle","stroke","start","end","react_default","a","createElement","className","ref","style","RenderFunction","toggle","stop","isRunning","isFinished","sec","floor","s","m","ms","classnames","concat","substr","onClick","App","dist_default","duration","updateInterval","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58fb89cb.chunk.js","sourcesContent":["import React, { useRef, useEffect, ReactNode } from \"react\";\nconst { PI } = Math;\nconst TAU = PI * 2;\n\ntype RingProps = {\n  value: number;\n  size?: number;\n  thickness?: number;\n  color?: string;\n  trackColor?: string;\n  children?: ReactNode;\n};\n\nexport default function({\n  value,\n  thickness = 10,\n  color = \"#ffffff90\",\n  trackColor = \"#ffffff20\",\n  children,\n}: RingProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const draw = () => {\n    if (!canvasRef.current) return;\n\n    const canvas = canvasRef.current;\n    const size = Math.min(canvas.offsetHeight, canvas.offsetWidth);\n    canvas.width = size;\n    canvas.height = size;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // clear the canvas and config lines\n    ctx.clearRect(0, 0, size, size);\n    ctx.lineWidth = thickness;\n    ctx.lineCap = \"round\";\n\n    // draw the track\n    ctx.beginPath();\n    ctx.arc(size / 2, size / 2, size / 2 - thickness, 0, TAU);\n    ctx.strokeStyle = trackColor;\n    ctx.stroke();\n\n    // draw the indicator\n    if (value > 0) {\n      const start = -PI / 2; // 12:00\n      const end = start + TAU * value;\n      ctx.beginPath();\n      ctx.arc(size / 2, size / 2, size / 2 - thickness, start, end);\n      ctx.strokeStyle = color;\n      ctx.stroke();\n    }\n  };\n\n  useEffect(draw);\n\n  return (\n    <div className=\"ring\">\n      <canvas\n        className=\"ring__canvas\"\n        ref={canvasRef}\n        style={{ width: \"100%\" }}\n        width=\"100%\"\n      />\n      <div className=\"ring__content\">{children}</div>\n    </div>\n  );\n}\n","import StopWatch, { StopWatchChildren } from \"@felds/stopwatch\";\nimport classnames from \"classnames\";\nimport React from \"react\";\nimport Ring from \"./Ring\";\n\nconst RenderFunction: StopWatchChildren = ({\n  value,\n  toggle,\n  stop,\n  isRunning,\n  isFinished,\n}) => {\n  const sec = Math.floor(value / 1000);\n  const s = sec % 60;\n  const m = Math.floor(sec / 60);\n  const ms = Math.floor(value % 1000);\n\n  return (\n    <div className={classnames(\"cd\", isFinished && \"cd--is-finished\")}>\n      <Ring size={200} value={value / 9000}>\n        <div className=\"cd__display\">\n          <div className=\"cd__time\">\n            <span className=\"cd__m\">{`00${m}`.substr(-2)}</span>:\n            <span className=\"cd__s\">{`00${s}`.substr(-2)}</span>\n            <span className=\"cd__ms\">.{`000${ms}`.substr(-3)}</span>\n          </div>\n\n          <div className=\"cd__duration\">01:30</div>\n        </div>\n      </Ring>\n\n      <div className=\"cd__actions\">\n        <button className=\"cd__action cd__action--toggle\" onClick={toggle}>\n          {isRunning ? \"Pause\" : \"Play\"}\n        </button>\n        <button className=\"cd__action cd__action--stop\" onClick={stop}>\n          Stop\n        </button>\n      </div>\n    </div>\n  );\n};\n\nfunction App() {\n  const duration = 90000; // 90 secs\n\n  return (\n    <div>\n      <StopWatch\n        children={RenderFunction}\n        duration={duration}\n        updateInterval={16}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}